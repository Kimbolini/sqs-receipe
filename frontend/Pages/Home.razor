@page "/"

@using frontend.Data
@using System.Text.Json
@using System.Text.Json.Serialization
@using Newtonsoft.Json.Linq
@inject IHttpClientFactory ClientFactory
@inject NavigationManager _nav

<PageTitle>Home</PageTitle>

<h1>Recipes!</h1>

<p>Welcome to your meal database. </p>

<form>
    <p>
        Search for meals: <input type="text" @bind-value="@searchTextBoxContent" placeholder="Search for receipts"/>
        <button type="submit" @onclick="@SearchMealsAPI">Search</button>
    </p>
</form>



    <div class="d-flex" id="meal-preview-wrap-container">
        @foreach (var item in meals)
        {
            <MealPreviewCardComp Id=@item.idMeal
                         Title=@item.strMeal
                         Category=@item.strCategory
                         Area=@item.strArea
                         ImageUrl=@item.strMealThumb
                        OnSelected="HandleItemSelected"
                        Selected=@item.Selected>
                <Hashtags>
                    @if (item.strTags != "")
                    {
                        <div class="alert alert-primary">
                            @item.strTags
                        </div>
                    }
                </Hashtags>
            </MealPreviewCardComp>
        }
    </div>




@code {

    private IEnumerable<Meal> meals = Array.Empty<Meal>();
    private bool getMealsError;
    private bool responseIsEmpty;
    private bool shouldRender;
    private string? searchTextBoxContent;

    protected override bool ShouldRender() => shouldRender;

    /*
    protected override async Task OnInitializedAsync()
    {
    var request = new HttpRequestMessage(HttpMethod.Get, "https://www.themealdb.com/api/json/v1/1/search.php?s=" + searchTextBoxContent);

    //request.Headers.Add("Accept", "application/vnd.github.v3+json");
    request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

    var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {

        //var responseStream = await response.Content.ReadAsStreamAsync();
        //meals = await JsonSerializer.DeserializeAsync<IEnumerable<Meal>>(responseStream);



        var responseContent = await response.Content.ReadAsStringAsync();
        meals = JObject.Parse(responseContent)["meals"].ToObject<IEnumerable<Meal>>();

        // meals = JsonConvert.DeserializeObject<Meal[]>(responseContent);
        //meals = await JsonConvert.DeserializeObject<Meal>(responseContent);
        }
        else
        {
        getMealsError = true;
    }
    shouldRender = true;
    }*/

    private async Task SearchMealsAPIAsync()
    {

        var request = new HttpRequestMessage(HttpMethod.Get, "https://www.themealdb.com/api/json/v1/1/search.php?s=" + searchTextBoxContent);

        //request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.Content.Headers.ContentLength > 1)
            {
                meals = JObject.Parse(responseContent)["meals"].ToObject<IEnumerable<Meal>>();
                await Task.Delay(1000);
            } else
            {
                responseIsEmpty = true;
            }

        }
        else
        {
            getMealsError = true;
        }
        await Task.Delay(1000);
        //shouldRender = true;
    }

    private void SearchMealsAPI()
    {
        var searchRequest = searchTextBoxContent;
        if (searchRequest != "")
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "https://www.themealdb.com/api/json/v1/1/search.php?s=" + searchRequest);

            //request.Headers.Add("Accept", "application/vnd.github.v3+json");
            request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

            var client = ClientFactory.CreateClient();

            var response = client.Send(request);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = response.Content.ReadAsStringAsync();

                if (response.Content.Headers.ContentLength > 1)
                {
                    meals = JObject.Parse(responseContent.Result)["meals"].ToObject<IEnumerable<Meal>>();
                }
                else
                {
                    responseIsEmpty = true;
                }

            }
            else
            {
                getMealsError = true;
            }
            shouldRender = true;
            StateHasChanged();
        }
    }

    void HandleItemSelected(string selectedMealId)
    {
        foreach (var item in meals) item.Selected = false;

        meals.First(f => f.idMeal == selectedMealId).Selected = true;
        _nav.NavigateTo($"/{selectedMealId}");

    }
}

