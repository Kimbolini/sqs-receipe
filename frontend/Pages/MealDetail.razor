@page "/{Id}/{IsFromDB:bool?}"

@using frontend.Data
@using frontend.Services.DTO;
@using frontend.Services;
@inject MealsAtAPIService MealAPIService;
@inject MealsInDbService MealDBService;
@inject InternalCacheService CacheService;

@namespace frontend.Pages

<div>
    <h3>@MealDto.Name</h3>
</div>

<!--Add To Favourites Button-->
@if(!IsFromDB && !IsAlreadyInFavourites)
{
    <div id="favourite-button-div">
        <input id="add-button" type="button" value="Add To Favourites" @onclick="@AddToFavourites" data-cy="addToFavouritesButton" />
    </div>
}

<!--Successfully added badge-->
@if(SuccessfullyAdded)
{
    <div id="success-badge" data-cy="addedToFavouritesInfoBox">Successfully added to Favourites</div>
}

@if(ErrorWhenAdding)
{
    <div id="error-badge" data-cy="errorAddingToFavouritesInfoBox">There was an error when adding to favourites.</div>
}

<div class="card-group">
    <img class="card-img-top" src="@MealDto.ThumbnailUrl" alt="Picture of @MealDto.Name" id="mealdetail-picture" data-cy="mealDetailPicture">

    <!--Recipe ingredients-->
    <div class="card" id="mealdetail-ingredients" data-cy="mealDetailIngredients">
        <div class="card-body">
            <h5 class="card-title">Ingredients</h5>
        <ul class="list-group list-group-flush" >
      
            @for(int i = 0; i < MealDto.Ingredients.Count; i++)
            {
                <li class="list-group-item">@MealDto.Measures.ElementAt(i)  @MealDto.Ingredients.ElementAt(i)</li>
            }
        </ul>
        </div>
    </div>

</div>

<!--Recipe instructions-->
<div>
    <div class="card" id="mealdetail-instructions" data-cy="mealDetailInstructions">
        <div class="card-body">
            <h5 class="card-title">Instructions</h5>
        <p class="card-text">@MealDto.Instructions</p>
        </div>
    </div>

</div>


@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public bool IsFromDB { get; set; }

    private MealDto MealDto;

    private bool IsAlreadyInFavourites;

    private bool SuccessfullyAdded;
    private bool ErrorWhenAdding;

    protected override void OnParametersSet()
    {
        var isNumeric = int.TryParse(Id, out int Idnr);
        if(isNumeric == true)
        {
            if(Idnr > 0)
            {
                if (IsFromDB)
                {
                    MealDto = MealDBService.GetMealById(Idnr).Result;
                } else
                {
                    MealDto = MealAPIService.GetMealByIdFromAPI(Id).Result;
                    IsAlreadyInFavourites = CacheService.IsInFavourites(Id);
                }
            }   
            else
            {
                //Navigates to error page
            }
        } 
        else
        {
            //Navigates to error page
        }
    }

    private void AddToFavourites()
    {
        MealDBService.AddMealDtoToFavourites(this.MealDto);

        IsAlreadyInFavourites = true;
        SuccessfullyAdded = true;

        /*
        if (response.IsSuccessStatusCode)
        {
            IsAlreadyInFavourites = true;
            SuccessfullyAdded = true;
            ErrorWhenAdding = false;
        } else
        {
            ErrorWhenAdding = true;
            IsAlreadyInFavourites = false;
            SuccessfullyAdded = false;
        }*/
    }
}
