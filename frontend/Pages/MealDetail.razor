@page "/{Id}/{IsFromDB:bool?}"

@using frontend.Data
@using frontend.Services.DTO;
@using frontend.Services;
@inject MealsAtAPIService MealAPIService;
@inject MealsInDbService MealDBService;

@namespace frontend.Pages

<h3>@MealDto.Name</h3>

@if(!IsFromDB)
{
    <span>
        <input type="button" value="Add To Favourites" @onclick="@AddToFavourites" />
    </span>
}

<div class="card">
    <img class="card-img-top" src="@MealDto.ThumbnailUrl" alt="Picture of @MealDto.Name" id="mealdetail-picture">
</div>


<div class="card">
    <ul class="list-group list-group-flush" id="mealdetail-ingredients">
      
        @for(int i = 0; i < MealDto.Ingredients.Count; i++)
        {
            <li class="list-group-item">@MealDto.Measures.ElementAt(i)  @MealDto.Ingredients.ElementAt(i)</li>
        }
    </ul>
</div>


<div class="card">
    <p>@MealDto.Instructions</p>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public bool IsFromDB { get; set; }

    private MealDto MealDto;

    protected override void OnParametersSet()
    {
        var isNumeric = int.TryParse(Id, out int Idnr);
        if(isNumeric == true)
        {
            if(Idnr > 0)
            {
                if (IsFromDB)
                {
                    MealDto = MealDBService.GetMealById(Idnr).Result;
                } else
                {
                    MealDto = MealAPIService.GetMealByIdFromAPI(Id).Result;
                }
            }   
            else
            {
                //Navigate to error page
            }
        } 
        else
        {
            //Navigate to error page
        }

    }

    private void AddToFavourites()
    {
        MealDBService.AddMealDtoToFavourites(this.MealDto);
    }
}
